models = []
accuracy = []
models_sse = []
sse = []
for i in range(1,30):
    model_j = []
    score_j = []
    sse_j = []
    for j in range(0,10):
        clf = MLPRegressor(solver='lbfgs',hidden_layer_sizes=(i,))
        clf.fit(yval_est, yval)
        model_j.append(clf)
        score_j.append(np.mean(abs(clf.predict(yval_est) - yval)))
        
    
    print("Layer {} test accuracy: {:.4f}".format(i,min(score_j)))
    print()
    
    models.append(model_j[np.argmin(score_j)])
    accuracy.append(min(score_j))
#%%
model_acc = np.argmin(accuracy)
print('Best number of hlayers test acc = {}'.format(model_acc+1)) 

clf = models[model_acc]
y_est = clf.predict(predictions)
y_est[y_est<0] = 0
#%%



exported_pipeline = make_pipeline(
    SelectPercentile(score_func=f_regression, percentile=73),
    ExtraTreesRegressor(bootstrap=True, max_features=0.7500000000000001, min_samples_leaf=16, min_samples_split=5, n_estimators=100)
)

exported_pipeline.fit(training_features, training_target)
results = exported_pipeline.predict(testing_features)

(-5.8?) to do: